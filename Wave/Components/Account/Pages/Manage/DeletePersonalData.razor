@page "/Account/Manage/DeletePersonalData"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Wave.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<DeletePersonalData> Logger
@inject IStringLocalizer<DeletePersonalData> Localizer

<PageTitle>@Localizer["Title"]</PageTitle>

<StatusMessage Message="@message" />

<BoardComponent>
    <BoardCardComponent Heading="@Localizer["Title"]">
        <Alert Type="Alert.MessageType.Warning" CanRemove="false">
            <strong class="font-bold">@Localizer["Delete_FinalWarning"]</strong>
        </Alert>
        
        <EditForm Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post" class="w-full">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-error" role="alert" />
            @if (requirePassword) {
                <InputLabelComponent LabelText="@Localizer["Delete_Password_Label"]" For="() => Input.Password">
                    <InputText type="password" @bind-Value="Input.Password" class="input input-bordered w-full" required
                               autocomplete="current-password" placeholder="@Localizer["Delete_Password_Placeholder"]" />
                </InputLabelComponent>
            }
            <button class="btn btn-lg btn-error w-full" type="submit">@Localizer["Delete_FinalSubmit"]</button>
        </EditForm>
    </BoardCardComponent>
</BoardComponent>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool requirePassword;

    [CascadingParameter] 
    private HttpContext HttpContext { get; set; } = default!;
    [SupplyParameterFromForm] 
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync() {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        requirePassword = await UserManager.HasPasswordAsync(user);
    }

    private async Task OnValidSubmitAsync() {
        if (requirePassword && !await UserManager.CheckPasswordAsync(user, Input.Password)) {
            message = Localizer["Delete_ErrorWrongPassword"];
            return;
        }

        var result = await UserManager.DeleteAsync(user);
        if (!result.Succeeded) {
            throw new InvalidOperationException(Localizer["Delete_ErrorUnknown"]);
        }

        await SignInManager.SignOutAsync();

        string userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' deleted themselves.", userId);

        RedirectManager.RedirectToWithStatus("/", Localizer["Delete_Success"], HttpContext);
    }

    private sealed class InputModel {
        [DataType(DataType.Password)] public string Password { get; set; } = "";
    }
}
