@page "/manage/users"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Wave.Data

@rendermode InteractiveServer
@attribute [Authorize(Policy = "RoleAssignPermissions")]
@attribute [StreamRendering]
@inject UserManager<ApplicationUser> UserManager
@inject IStringLocalizer<ManageUsers> Localizer

<PageTitle>@(TitlePrefix + Localizer["Title"])</PageTitle>

<h1 class="text-3xl lg:text-5xl font-light mb-6">@Localizer["Title"]</h1>

<section class="mb-3 overflow-x-auto">
	<h3 class="text-xl lg:text-3xl mb-2">
		@Localizer["Authors"]
		<!-- TODO:: implement -->
		<button class="btn btn-sm btn-square btn-ghost text-success">
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
				<path stroke-linecap="round" stroke-linejoin="round" d="M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
			</svg>
		</button>
	</h3>
	<UserTable Users="Authors" RemoveCallback="@(async u => await Remove(u, "Author"))" />
</section>
<section class="mb-3 overflow-x-auto">
	<h3 class="text-xl lg:text-3xl mb-2">@Localizer["Reviewers"]</h3>
	<UserTable Users="Reviewers" RemoveCallback="@(async u => await Remove(u, "Reviewer"))" />
</section>
<section class="mb-3 overflow-x-auto">
	<h3 class="text-xl lg:text-3xl mb-2">@Localizer["Moderators"]</h3>
	<UserTable Users="Moderators" RemoveCallback="@(async u => await Remove(u, "Moderator"))" />
</section>
<section class="mb-3 overflow-x-auto">
	<h3 class="text-xl lg:text-3xl mb-2">@Localizer["Administrators"]</h3>
	<UserTable Users="Admins" RemoveCallback="@(async u => await Remove(u, "Admin"))" />
</section>

<ToastComponent @ref="Toast" />

@code {
	[CascadingParameter(Name = "TitlePrefix")]
	private string TitlePrefix { get; set; } = default!;

	public ToastComponent Toast { get; set; } = null!;

	private IList<ApplicationUser> Authors { get; set; } = new List<ApplicationUser>();
	private IList<ApplicationUser> Reviewers { get; set; } = new List<ApplicationUser>();
	private IList<ApplicationUser> Moderators { get; set; } = new List<ApplicationUser>();
	private IList<ApplicationUser> Admins { get; set; } = new List<ApplicationUser>();
	
	[CascadingParameter]
	private Task<AuthenticationState> AuthenticationState { get; set; } = default!;
	private ApplicationUser? User { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender) {
		if (!firstRender) return;
		var state = await AuthenticationState;
		User = await UserManager.GetUserAsync(state.User);

		Authors = await UserManager.GetUsersInRoleAsync("Author");
		Reviewers = await UserManager.GetUsersInRoleAsync("Reviewer");
		Moderators = await UserManager.GetUsersInRoleAsync("Moderator");
		Admins = await UserManager.GetUsersInRoleAsync("Admin");
	}

	private async Task Remove(ApplicationUser user, string role) {
		if (User is null) return;
		if (user.Id == User.Id) {
			Toast.ShowError(Localizer["Error_EditSelf"]);
			return;
		}
		await UserManager.RemoveFromRoleAsync(user, role);
	}
}
