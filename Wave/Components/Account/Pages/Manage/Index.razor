@page "/Account/Manage"

@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Wave.Data
@using Wave.Services

@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject IDbContextFactory<ApplicationDbContext> ContextFactory
@inject ImageService ImageService

<PageTitle>Profile</PageTitle>

<h3 class="text-xl mb-3">Profile</h3>

<div class="max-w-xs" Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
    <label class="form-control w-full">
        <div class="label">
            <span class="label-text">Username</span>
        </div>
        <input class="input input-bordered w-full" type="text" value="@Username"
               placeholder="Please choose your username." disabled/>
    </label>

    @if (User?.ProfilePicture is not null) {
        <div class="avatar w-24 my-3">
            <div class="rounded">
                <img src="/images/@(User.ProfilePicture.ImageId)" alt="" loading="lazy" />
            </div>
        </div>
    }
    <label class="form-control w-full">
        <div class="label">
            <span class="label-text">Profile Picture</span>
        </div>
        <FileUploadComponent FileUploadedCallback="ProfilePictureChanged"/>
    </label>
</div>

@code {
    private ApplicationUser? User { get; set; } = default!;
    private string? Username { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    
    protected override async Task OnInitializedAsync() {
        if (AuthenticationState is not null) {
            var state = await AuthenticationState;
            User = await UserManager.GetUserAsync(state.User);
            Username = User.UserName;
            await using var context = await ContextFactory.CreateDbContextAsync();
            await context.Entry(User).Reference(u => u.ProfilePicture).LoadAsync();
        }
    }

    private async Task ProfilePictureChanged(string tempFilePath) {
        var guid = await ImageService.StoreImageAsync(tempFilePath);
        if (!guid.HasValue) throw new ApplicationException("Processing Image failed.");

        await using var context = await ContextFactory.CreateDbContextAsync();
        if (User.ProfilePicture is not null) {
            context.Remove(User.ProfilePicture);
        }

        User.ProfilePicture = new ProfilePicture() {
            ImageId = guid.Value
        };

        context.Update(User);
        await context.SaveChangesAsync();

        // TODO notify changed pfp
    }

}
