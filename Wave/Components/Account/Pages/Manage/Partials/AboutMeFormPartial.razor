@using Wave.Data
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using Wave.Utilities

@inject UserManager<ApplicationUser> UserManager
@inject IStringLocalizer<Wave.Components.Account.Pages.Manage.Index> Localizer

<EditForm FormName="about-me" Model="@Model" OnValidSubmit="OnValidSubmit" method="post" class="w-full">
	<label class="form-control w-full">
		<div class="label">
			<span class="label-text">
				@Localizer["AboutTheAuthor_Label"]
				<HelpDropdownComponent Body="@Localizer["AboutTheAuthor_Explanation"]" />
			</span>
		</div>
		<InputTextArea class="textarea textarea-bordered w-full h-24" maxlength="512"
		               @bind-Value="@Model.AboutTheAuthor" placeholder="@Localizer["AboutTheAuthor_Placeholder"]" />
		<div class="label">
			<span class="label-text-alt text-error"><ValidationMessage For="() => Model.AboutTheAuthor" /></span>
		</div>
	</label>
	<label class="form-control w-full">
		<div class="label">
			<span class="label-text">
				@Localizer["Biography_Label"]
				<span class="badge badge-info badge-sm badge-outline">Markdown</span>
				<HelpDropdownComponent Body="@Localizer["Biography_Explanation"]" />
			</span>
		</div>
		<InputTextArea class="textarea textarea-bordered w-full h-48" maxlength="4096"
					   @bind-Value="@Model.Biography" placeholder="@Localizer["Biography_Placeholder"]" />
		<div class="label">
			<span class="label-text-alt text-error"><ValidationMessage For="() => Model.Biography" /></span>
		</div>
	</label>
	
	<button type="submit" class="btn btn-primary w-full">
		@Localizer["Submit"]
	</button>
</EditForm>

@code {
	[Parameter]
	public required ApplicationUser? User { get; set; }

	[SupplyParameterFromForm(FormName = "about-me")]
	private InputModel Model { get; set; } = new();

	protected override void OnInitialized() {
		Model.AboutTheAuthor ??= User?.AboutTheAuthor;
		Model.Biography ??= User?.Biography;
	}

	private async Task OnValidSubmit(EditContext obj) {
		if (User is null) return;
		if (Model.Biography is not null) {
			User.BiographyHtml = MarkdownUtilities.Parse(Model.Biography);
			User.Biography = Model.Biography;
		}
		if (Model.AboutTheAuthor is not null)
			User.AboutTheAuthor = Model.AboutTheAuthor;

		await UserManager.UpdateAsync(User);
	}

	private sealed record InputModel {
		[MaxLength(512)] 
		public string? AboutTheAuthor { get; set; } 
		[MaxLength(4096)] 
		public string? Biography { get; set; }
	}

}
