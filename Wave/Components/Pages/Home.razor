@page "/"
@using Microsoft.Extensions.Localization
@using Microsoft.EntityFrameworkCore
@using Wave.Data

@rendermode InteractiveServer
@attribute [StreamRendering]
@inject IDbContextFactory<ApplicationDbContext> ContextFactory;
@inject IStringLocalizer<Home> Localizer

<PageTitle>Home</PageTitle>

<h1>@Localizer["Greeting"]</h1>

Welcome to your new app.

<div>
	@foreach (Article article in Articles) {
		<div>
			<a href="/article/@article.Id">
				<p>@article.Title</p>
				<p>By @article.Author.Name</p>
			</a>
		</div>
	}
</div>

<AuthorizeView>
	<Authorized>
		<h3 class="text-2xl my-3">Claims</h3>
		<dl>
			<dt>Author?</dt>
			<dd>@context.User.IsInRole("Author")</dd>
			<dt>Reviewer?</dt>
			<dd>@context.User.IsInRole("Reviewer")</dd>
			<dt>Moderator?</dt>
			<dd>@context.User.IsInRole("Moderator")</dd>
			<dt>Admin?</dt>
			<dd>@context.User.IsInRole("Admin")</dd>
		</dl>
		
	</Authorized>
</AuthorizeView>

@code {
    private List<Article> Articles { get; } = [];

    protected override async Task OnInitializedAsync() {
        await using var context = await ContextFactory.CreateDbContextAsync();

        var now = DateTimeOffset.UtcNow;
        var articles = await context.Set<Article>()
            .Include(a => a.Author)
            .Where(a => a.Status >= ArticleStatus.Published && a.PublishDate <= now)
            .OrderBy(a => a.PublishDate)
            .Take(10)
            .ToListAsync();
        Articles.AddRange(articles);
    }
}